{"changed":true,"filter":false,"title":"Trickle.js","tooltip":"/Trickle.js","value":"/*\r\nTrickle - create global filters using knockout, bootstrap and chosen\r\nauthored by Ron Roth(ronrothjr@gmail.com)\r\n\r\nvar filter = new Trickle({\r\n  id: 'FiltersDiv',\r\n  current: window.currentFilter,\r\n  title: 'Trickle Filters',           //optional\r\n  url: '/Filters/UpdateFilters',      //optional\r\n  all: 'All',                         //optional\r\n  hidden: true,                       //optional\r\n  persistTrigger: 'FiltersPersisted', //optional\r\n  model: {                            //optional\r\n    displayFilters: window.includeFilters,\r\n  },\r\n  filters: {\r\n    'order': {\r\n      display: 'displayFilters',\r\n      property: 'OrderNumber',\r\n      label: 'Order Number',\r\n      type: 'select',\r\n      selectOptions: {\r\n        isOptionsDictionary: true,\r\n        allowAll: true,\r\n        sortOptions: true,\r\n        bindings: {\r\n          options: window.availableItems,\r\n          chosen: { width: '300px' },\r\n          optionsValue: 'id',\r\n          optionsText: 'text',\r\n          selectedOptions: window.selectedItems\r\n        }\r\n      }\r\n    }\r\n  }\r\n}); \r\n*/\r\n\r\n(function(d, w, $, _) {\r\n  var Trickle = function(options) {\r\n    var trickle = {\r\n      id: null,\r\n      current: null,\r\n      title: null,\r\n      model: {},\r\n      changed: {},\r\n      persistTrigger: 'FiltersPersisted',\r\n      all: '--All--',\r\n      hidden: true,\r\n      initialized: false,\r\n      \r\n      init: function(options) {\r\n        if (!this.validateOptions(options))\r\n          return false;\r\n        _.assign(this, options);\r\n        _.bindAll(this);\r\n        return true;\r\n      },\r\n      \r\n      emit: function() {\r\n        this.write();\r\n        this.bind();\r\n        this.original = JSON.stringify(this.current);\r\n        return {\r\n          get: this.getProp,\r\n          set: this.setProp,\r\n          reset: this.resetFilters,\r\n          apply: this.applyFilters,\r\n          model: this.model\r\n        };\r\n      },\r\n      \r\n      validateOptions: function(options) {\r\n        if (!options) {\r\n          console.log('Trickle: no filter options');\r\n          return false;\r\n        }\r\n        if (!options.id) {\r\n          console.log('Trickle: no element id');\r\n          return false;\r\n        }\r\n        if (!options.filters) {\r\n          console.log('Trickle: no filters');\r\n          return false;\r\n        }\r\n        return true;\r\n      },\r\n      \r\n      write: function () {\r\n        (this.$view = $('#'+this.id)).append(this.html('view'));\r\n        this.$button = this.$view.find('.filter_button');\r\n        this.$labels = this.$view.find('.filter_labels');\r\n        this.$content = this.$view.find('.filter_content');\r\n        _.each(this.filters, _.bind(this.normalizeFilter, this));\r\n        _.each(this.filters, _.bind(this.writeFilter, this));\r\n        this.$content.append(this.html('apply'));\r\n        this.$view.show();\r\n      },\r\n      \r\n      writeFilter: function (filter, key, filters) {\r\n        filter.value = _.isFunction(filter.value) ? filter.value() : filter.value;\r\n        _.each(filter.property, _.bind(function(property){\r\n          this.model['current_'+key+'_'+property.replace(/\\./g,'_')] = ko.observable();\r\n        }, this));\r\n        this.model[filter.id+'_display'] = ko.observable(filter.display);\r\n        this.model[filter.id+'_display_label'] = ko.observable(filter.display);\r\n        if (this.hidden)\r\n          this.$labels.append(($(this.html('labelcontainer', filter)))\r\n            .append(($(this.html('label', filter)))));\r\n        var bindings = this.addBindings(filter, key, filters);\r\n        this.$content.append(($(this.html('filtercontainer', filter)))\r\n          .append(($(this.html('filter', filter)))\r\n            .append(this.html(filter.type,\r\n              _.assign(filter,{\r\n                filter: filter,\r\n                bindings: bindings\r\n              }))+this.html('validation',filter))));\r\n      },\r\n      \r\n      normalizeFilter: function (filter, key) {\r\n        filter.id = key;\r\n        filter.error = filter.error || 'Invalid '+(\r\n          _.isUndefined(filter.label) ? filter.id :\r\n            _.isArray(filter.label) ? filter.label.join(', ') : filter.label);\r\n        filter.display = _.isUndefined(filter.display) ? \r\n          true :\r\n          _.isBoolean(this.model[filter.display]) ?\r\n            this.model[filter.display] :\r\n            true;\r\n        if (filter.property) {\r\n          if (_.isString(filter.property))\r\n            filter.property = [filter.property];\r\n          if (_.isString(filter.label)) {\r\n            var obj = {};\r\n            obj[filter.property[0]] = filter.label;\r\n            filter.label = obj;\r\n          }\r\n          filter.value = this.getDescendantProp(filter.property, this.current);\r\n        }\r\n        filter.value = _.isFunction(filter.value) ? filter.value() : filter.value;\r\n      },\r\n      \r\n      addBindings: function (filter, key, filters) {\r\n        this.filter = filter;\r\n        this.databind = '';\r\n        if (filter.type === 'daterange')\r\n          this.addDateRange(key,filter.property); \r\n        else if (filter.type === 'listbuilder') {\r\n          this.addListBuilder(filter);\r\n        }\r\n        else\r\n          _.each(filter.property, _.bind(function (property){\r\n            this.model[key+'_value_'+property.replace(/\\./g,'_')] = \r\n              ko.observable();\r\n            this.model[key+'_invalid'] = \r\n              ko.observable(false);\r\n          }, this));\r\n        if (filter.type === 'checkbox') {\r\n          _.each(filter.property, _.bind(function (property){\r\n            this.model[key+'_value_'+property.replace(/\\./g,'_')]\r\n              .subscribe(_.bind(function (val) {\r\n                var valid = false;\r\n                _.each(filter.property, _.bind(function (property){\r\n                  if (this.model[key+'_value_'+property.replace(/\\./g,'_')]())\r\n                    valid = true;\r\n                }, this));\r\n                this.model[key+'_invalid'](!valid);\r\n              }, this));\r\n          }, this));\r\n        }\r\n        if (filter.selectOptions) {\r\n          this.databind += this.html('bindings',{\r\n            key: key, \r\n            property: filter.property, \r\n            type: filter.type,\r\n            selectedOptions: \r\n              filter.selectOptions.bindings.selectedOptions\r\n          });\r\n          _.each(filter.selectOptions.bindings, this.addBinding);\r\n        }\r\n        if (filter.cascade){\r\n          this.addCascadeFunction({\r\n            filter: filter, \r\n            child: filters[filter.cascade.child]\r\n          });\r\n          this.databind += ', event: { change: '+filter.id+'_cascade }';\r\n        }\r\n        return this.databind;\r\n      },\r\n      \r\n      addBinding: function (binding, key) {\r\n        var id = this.filter.id + '_' + key;\r\n        if (_.isString(binding)){\r\n          this.model[id] = ko.observable(binding);\r\n          this.databind += ','+key+': \\''+binding+'\\'';\r\n        } else {\r\n          if (_.isFunction(binding))\r\n            binding = binding();\r\n          if (_.isArray(binding))\r\n            this.model[id] = ko.observableArray(binding);\r\n          else\r\n            this.model[id] = ko.observable(binding);\r\n          this.databind += ',' + key + ': ' + id;\r\n        }\r\n      },\r\n      \r\n      getDescendantProp: function (prop, obj) {\r\n        prop = _.isArray(prop) ? prop : [prop];\r\n        var values = {};\r\n        _.each(prop, _.bind(function (p) {\r\n          var val = this.getDescendant(p, obj);\r\n          values[p.replace(/\\./g,'_')] = \r\n            _.isFunction(val) ? val() : val;\r\n        }, this));\r\n        return values;\r\n      },\r\n      \r\n      getDescendant: function (prop, obj) {\r\n        var a = _.isArray(prop) ? prop : prop.split(\".\");\r\n        if (a.length === 1)\r\n          return obj[a[0]];\r\n        else if (a.length > 1)\r\n          return this.getDescendant(a, obj[a.shift()]);\r\n      },\r\n      \r\n      setDescendantProp: function (obj, prop, val) {\r\n        var a = _.isArray(prop) ? prop : prop.split(\".\");\r\n        if (a.length === 1)\r\n          obj[a[0]] = val;\r\n        else if (a.length > 1)\r\n          this.setDescendantProp(obj[a.shift()], a, val);\r\n      },\r\n      \r\n      getProp: function (prop) {\r\n        if (prop)\r\n          return this.getDescendantProp(prop, this.current)[prop];\r\n        else\r\n          return _.cloneDeep(this.current);\r\n      },\r\n      \r\n      setProp: function (prop, val) {\r\n        if (_.isObject(prop) && _.isUndefined(val))\r\n          this.current = prop;\r\n        else\r\n          this.setDescendantProp(this.current, prop, val);\r\n        this.initialized = false;\r\n        this.applyCurrent();\r\n      },\r\n      \r\n      bind: function () {\r\n        this.model.all = ko.observable(this.all);\r\n        (this.model.slide = this.slide)();\r\n        this.model.applyFilters = this.applyFilters;\r\n        this.model.resetFilters = this.resetFilters;\r\n        console.log('Trickle',this.model);\r\n        ko.applyBindings(this.model,this.$view[0]);\r\n        this.applyCurrent();\r\n      },\r\n      \r\n      slide: function () {\r\n        if (this.hidden && this.$button && this.$content) {\r\n          this.$content.slideToggle('fast');\r\n          _.delay(this.setContentOverflow, 500);\r\n        }\r\n      },\r\n      \r\n      setContentOverflow: function () {\r\n        this.$content.css('overflow', 'visible');\r\n      },\r\n      \r\n      resetFilters: function() {\r\n        this.initialized = false;\r\n        this.current = JSON.parse(this.original);\r\n        this.applyCurrent();\r\n      },\r\n      \r\n      applyFilters: function () {\r\n        this.changed = {};\r\n        this.PersistLocalOnly = false;\r\n        _.each(this.filters, this.applyFilter);\r\n        this.persistFilters();\r\n        if (this.$content.is(':visible'))\r\n          this.model.slide();\r\n      },\r\n      \r\n      applyFilter: function (filter, key){\r\n        this.filter = filter;\r\n        this.key = key;\r\n        _.each(this.filters[key].property, \r\n          this.applyFilterValue);\r\n        \r\n      },\r\n      \r\n      getFilterValue: function(key, property) {\r\n        var filter = this.filters[key];\r\n        var val,\r\n            id = key+'_'+\r\n              (filter.type === 'multiple' ? \r\n                'selectedOptions' : \r\n                'value_'+property.replace(/\\./g,'_')),\r\n            original = this.getDescendantProp(property, this.current)\r\n              [property.replace(/\\./g,'_')];\r\n        if (filter.type==='daterange')\r\n          val = this.getDateRangeValues(id, key);\r\n        else {\r\n          var invalid = this.model[key+'_invalid'];\r\n          if (_.isUndefined(invalid) || !invalid())\r\n            val = this.model[id]();\r\n          else\r\n            val = original;\r\n        }\r\n        return { value: val, original: original };\r\n      },\r\n      \r\n      applyFilterValue: function (property){\r\n        var val = this.getFilterValue(this.key, property);\r\n        if (_.isObject(val.value) ? \r\n        !_.isEqual(val.value,val.original) : \r\n        val.value != val.original)\r\n          this.changed[this.filter.id] = true;\r\n        this.setDescendantProp(this.current, property, val.value);\r\n      },\r\n      \r\n      persistFilters: function () {\r\n        if (this.url)\r\n          $.ajax({\r\n            url: this.url,\r\n            type: 'PUT',\r\n            dataType: 'json',\r\n            data: JSON.stringify(this.current),\r\n            contentType: 'application/json; charset=utf-8',\r\n            success: this.persistFiltersSuccess\r\n          });\r\n        else\r\n          this.persistFiltersSuccess({ \r\n              message: 'success', \r\n              data: this.current\r\n            });\r\n      },\r\n      \r\n      persistFiltersSuccess: function (response) {\r\n        this.applyCurrent();\r\n        _.each(this.filters, _.bind(function(filter){\r\n          if (this.changed[filter.id]) {\r\n            if (filter.onChanged)\r\n              $.event.trigger(filter.onChanged, this.current);\r\n            if (Object.keys(this.changed).length === 1 && filter.onsetCascadeConfig) {\r\n              $.event.trigger(filter.onPersistLocalOnly, this.current);\r\n              this.PersistLocalOnly = true;\r\n            }\r\n          }\r\n        }, this));\r\n        if (!this.PersistLocalOnly && this.persistTrigger)\r\n          $.event.trigger(this.persistTrigger, \r\n            { \r\n              message: response.message, \r\n              data: response.data\r\n            }\r\n          );\r\n      },\r\n      \r\n      applyCurrent: function () {\r\n        _.each(this.filters, this.applyCurrentFilter);\r\n        this.initialized = true;\r\n      },\r\n      \r\n      applyCurrentFilter: function (filter, key){\r\n        this.val = null;\r\n        this.filter = filter;\r\n        this.key = key;\r\n        _.each(filter.property,this.applyCurrentValue);\r\n        if (this.hidden)\r\n          this.model[this.key+'_display_label']\r\n            (this.val !== this.all);\r\n      },\r\n      \r\n      applyCurrentValue: function (property) {\r\n        this.val = this.getDescendantProp(property, this.current)\r\n          [property.replace(/\\./g,'_')];\r\n        var id = this.key+'_value_'+property.replace(/\\./g,'_');\r\n        if (!this.initialized) {\r\n          if (this.filter.type === 'daterange') {\r\n            this.model[id + '_dateRangeBegin'](this.val.Begin);\r\n            this.model[id + '_dateRangeEnd'](this.val.End);\r\n          }\r\n          else \r\n            this.model[id](this.val);\r\n          if (this.filter.type === 'multiple')\r\n            this.model[this.key+'_selectedOptions'](this.val);\r\n        }\r\n        if (this.filter.type === 'daterange') {\r\n          this.val = this.getDateRangeValues(id, this.key);\r\n          this.val = !this.val.Begin || !this.val.End ? \r\n            this.all : \r\n            new Date(this.val.Begin).format('m/d/yy') + ' - ' +\r\n            new Date(this.val.End).format('m/d/yy');\r\n        }\r\n        if (this.filter.type === 'select')\r\n          if (this.model[this.key+'_optionsValue'])\r\n            this.val = this.getOptionText(this.key, this.val);\r\n        if (this.filter.type === 'multiple') {\r\n          this.val = this.model[this.key+'_selectedOptions']();\r\n          this.val = this.val.length===0 ? \r\n            this.all : this.val.length + ' selected';\r\n        }\r\n        if (this.filter.type === 'listbuilder') {\r\n          this.val = this.model[id]();\r\n          this.val = this.val.length===0 ? \r\n            this.all : this.val.length + ' selected';\r\n        }\r\n        this.model\r\n          ['current_'+this.key+'_'+property.replace(/\\./g,'_')]\r\n            (this.val);\r\n      },\r\n      \r\n      getOptionText: function (key, val) {\r\n        var Value = this.model[key+'_optionsValue'](),\r\n            Text = this.model[key+'_optionsText'](),\r\n            item = this.model[key+'_options']()\r\n                    .filter(_.bind(function(item){\r\n                      return item[Value] == String(val);\r\n                    }, this));\r\n        return item ? item[0][Text] : '';\r\n      },\r\n      \r\n      addCascadeFunction: function (options) {\r\n        var config = this.setCascadeConfig(options);\r\n        this.model[config._parent.id+'_cascade'] = _.bind(function (e) {\r\n          _.delay(_.bind(function (){\r\n            this.val = this.model[config.koParent]();\r\n            this.cascadeValue = config.bindings.optionsValue;\r\n            this.cascadeText = config.bindings.optionsText;\r\n            this.opts = ko.observableArray();\r\n            _.each(config.options[this.val] || config.options, \r\n              this.addCascadeOption, this);\r\n            if (config._child.selectOptions.sortOptions)\r\n              this.opts.sort(this.sortCascadeOptions);\r\n            if (config._child.selectOptions.allowAll) {\r\n              var opt = {};\r\n              opt[this.cascadeValue] = config.all || this.all;\r\n              opt[this.cascadeText] = config.all || this.all;\r\n              this.opts.unshift(opt);\r\n            }\r\n            this.model[config.koChild](this.opts()[0][this.cascadeValue]);\r\n            this.model[config._child.id+'_options'](this.opts());\r\n          }, this), 1);\r\n        }, this);\r\n      },\r\n      \r\n      setCascadeConfig: function(config) {\r\n        return config.filter ?\r\n          {\r\n            _parent: config.filter,\r\n            koParent: config.filter.id+'_value_'+config.filter.property,\r\n            _child: config.child,\r\n            koChild: config.child.id+'_value_'+config.child.property,\r\n            bindings: config.child.selectOptions.bindings,\r\n            options: config.filter.cascade.options,\r\n            all: config.all || this.all\r\n          } : \r\n          {\r\n            _parent: {id: config.key+'_'+config.name},\r\n            koParent: config.key+'_'+config.name+'_value',\r\n            _child: {\r\n              id: config.key+'_'+config.parm.cascade.child,\r\n              selectOptions: {sortOptions: true, allowAll: true}\r\n            },\r\n            koChild: config.key+'_'+config.parm.cascade.child+'_value',\r\n            bindings: {optionsValue: 'id', optionsText: 'text'},\r\n            options: config.parm.cascade.options,\r\n            all: config.all || this.all\r\n          };\r\n      },\r\n      \r\n      addCascadeOption: function(option, key) {\r\n        this.opt = {};\r\n        this.key = key;\r\n        if (this.val === this.all){\r\n          _.each(option, this.setCascadeOptionAll);\r\n        }else{\r\n          if (_.isObject(option)) {\r\n            this.opt[this.cascadeValue] = Object.keys(option)[0];\r\n            this.opt[this.cascadeText] = option[Object.keys(option)[0]];\r\n          } else {\r\n            this.opt[this.cascadeValue] = key;\r\n            this.opt[this.cascadeText] = option;\r\n          }\r\n        }\r\n        this.opts.push(this.opt);\r\n      },\r\n      \r\n      setCascadeOptionAll: function(option2, key2){\r\n        this.opt[this.cascadeValue] = key2;\r\n        this.opt[this.cascadeText] = option2 + ' - ' + this.key;\r\n      },\r\n      \r\n      sortCascadeOptions: function (i1, i2) {\r\n        var prop = this.cascadeText;\r\n        return i1[prop] < i2[prop] ? -1 : i1[prop] == i2[prop] ? 0 : 1;\r\n      },\r\n      \r\n      addDateRange: function (key, property) {\r\n        var id = key+'_value_'+property[0].replace(/\\./g,'_');\r\n        this.model[id+'_dateRangeBegin'] = ko.observable();\r\n        this.model[id+'_dateRangeEnd'] = ko.observable();\r\n        this.addDateRangeValidation(key, property);\r\n        this.addDateRangeSubscriptions(key, property);\r\n      },\r\n      \r\n      addDateRangeValidation: function (key, property) {\r\n        var id = key+'_value_'+property[0].replace(/\\./g,'_');\r\n        this.model[key+'_invalid'] = ko.observable(false);\r\n        this.model[id+'_dateRangeValidation'] = \r\n          _.bind(function (startDate, endDate) {\r\n            var koInvalidDates = this.model[key+'_invalid'],\r\n                //Strip out the time portion if it exists.\r\n                local_startDate = startDate === '' || startDate === null ?\r\n                  null : \r\n                  /T/.test(startDate) ? \r\n                    startDate.substring(0, startDate.indexOf('T')) : \r\n                    startDate,\r\n                local_endDate = endDate === '' || endDate === null ? \r\n                  null : \r\n                  /T/.test(endDate) ? \r\n                    endDate.substring(0, endDate.indexOf('T')) : \r\n                    endDate;\r\n            if (local_startDate && local_endDate) {\r\n              if (local_startDate > local_endDate)\r\n                koInvalidDates(true);\r\n              else\r\n                koInvalidDates(false);\r\n            } else\r\n              koInvalidDates(local_startDate || local_endDate);\r\n          }, this);\r\n      },\r\n      \r\n      addDateRangeSubscriptions: function (key, property) {\r\n        var id = key+'_value_'+property[0].replace(/\\./g,'_');\r\n        this.model[id + '_dateRangeBegin']\r\n          .subscribe(_.bind(function (val) {\r\n            if (this.model[id + '_dateBegin_stopTimeout'])\r\n              clearTimeout(this.model[id + '_dateBegin_stopTimeout']);\r\n            this.model[id + '_dateBegin_stopTimeout'] =\r\n              setTimeout(_.bind(function () {\r\n                this.model[id+'_dateRangeValidation']\r\n                  (val, this.model[id + '_dateRangeEnd']());\r\n              },this), 100);\r\n          }, this));\r\n        this.model[id + '_dateRangeEnd']\r\n          .subscribe(_.bind(function (val) {\r\n            if (this.model[id + '_dateEnd_stopTimeout'])\r\n              clearTimeout(this.model[id + '_dateEnd_stopTimeout']);\r\n            this.model[id + '_dateEnd_stopTimeout'] = \r\n              setTimeout(_.bind(function() {\r\n                this.model[id+'_dateRangeValidation']\r\n                  (this.model[id + '_dateRangeBegin'](), val);\r\n              }, this), 100);\r\n          }, this));\r\n      },\r\n      \r\n      getDateRangeValues: function (id, key) {\r\n        var begin = this.model[id+'_dateRangeBegin'](),\r\n            end = this.model[id+'_dateRangeEnd'](),\r\n            invalid = this.model[key+'_invalid']();\r\n        var val = invalid || !begin || !end ? \r\n          { Begin: null, End: null } : \r\n          {\r\n            Begin: new Date(begin).format('m/d/yy'),\r\n            End: new Date(end).format('m/d/yy')\r\n          };\r\n        return val;\r\n      },\r\n      \r\n      addListBuilder: function (filter) {\r\n        var self = this,\r\n            key = filter.id,\r\n            id = key+'_value_'+filter.property[0].replace(/\\./g,'_'),\r\n            parameters = filter.parameters,\r\n            all = 'Any',\r\n            val = this.getDescendantProp(filter.property, this.current);\r\n        self.model[id] = koList = ko.observableArray(val[filter.property]);\r\n        self.model[key+'_invalid'] = ko.observable(false);\r\n        self.model[key+'_enable_add_button'] = koEnabled = ko.observable(false);\r\n        self.model[key+'_display_filter_list'] = koDisplay = ko.observable(false);\r\n        var getItem = function (){\r\n                var item = {};\r\n                _.each(parameters, function (parm, name) {\r\n                  var val = $('.'+key+'_'+name+' option:selected').text();\r\n                  item[name] = val === all ? '' : val;\r\n                });\r\n                return item;\r\n              },\r\n            getFormat = function (data){\r\n                var item = '';\r\n                _.each(parameters, function (parm, name) {\r\n                  var val = data[name] === all ? '' : data[name];\r\n                  item += ( item !== '' && val !== '' ? ', ' : '' ) + val;\r\n                });\r\n                return item;\r\n              },\r\n            enable = function () {\r\n                var item = getItem();\r\n                var format = getFormat(item);\r\n                var enabled = format !== '' &&\r\n                    _.filter(koList(), item).length === 0;\r\n                koEnabled(enabled);\r\n                koDisplay(koList().length > 0);\r\n              },\r\n            addItem = function (){\r\n                koList.push(getItem());\r\n              },\r\n            removeItem = function (data){\r\n                koList.remove(data);\r\n              };\r\n        this.model[id].subscribe(enable);\r\n        self.model[key+'_addItem'] = addItem;\r\n        self.model[key+'_removeItem'] = removeItem;\r\n        self.model[key+'_formatItem'] = getFormat;\r\n        _.each(filter.parameters, function(parm, name) {\r\n            self.model[key+'_'+name+'_value'] = ko.observable(all);\r\n            (self.model[key+'_'+name+'_options'] = \r\n              ko.observableArray(parm.options))\r\n                .unshift({id: all, text: all});\r\n            if (parm.cascade)\r\n              self.addCascadeFunction({\r\n                key: key, name: name, parm: parm, all: all\r\n              });\r\n            self.model[key+'_'+name+'_changed'] = function(){\r\n              if (parm.cascade)\r\n                self.model[key+'_'+name+'_cascade']();\r\n              enable();\r\n            };\r\n          });\r\n      },\r\n      \r\n      html: function (template, data) {\r\n        return _.template(this.templates[template], data || this);\r\n      },\r\n      \r\n      templates: {\r\n        view: ' \\n\\\r\n          <%=title ? \"<h2>\" + title + \"</h2>\" : \"\"%>\\\r\n          <% if (hidden) {%><button \\n\\\r\n            class=\"filter_button btn btn-success pull-left\"\\\r\n            data-bind=\"click: slide\">Filters</button>\\\r\n          <div class=\"filter_labels\"></div> \\n<% } %>\\\r\n          <div class=\"filter_content\"></div> \\n',\r\n        labelcontainer: ' \\n\\\r\n            <!-- ko if: <%=id%>_display_label() -->\\\r\n            <div class=\"<%=id%>_label_container label-container pull-left\"></div> \\n\\\r\n            <!-- /ko -->',\r\n        filtercontainer: ' \\n\\\r\n            <!-- ko if: <%=id%>_display() -->\\\r\n            <div class=\"<%=id%>_container filter-container pull-left\"></div> \\n\\\r\n            <!-- /ko -->',\r\n        filter: '  \\n\\\r\n              <div class=\"<%=id%>_filter filter pull-left\"> \\n\\\r\n                <% if (!/radio|checkbox/.test(type) && label && label[property]) { %>\\\r\n                <label for=\"ddl<%=id%>\" class=\"content-label\"> \\n\\\r\n                <%=label[property]%></label><br/> \\n\\\r\n              <% } %></div> \\n',\r\n        label: '  \\n\\\r\n              <% _.each( property, function(val) { %>\\\r\n              <div class=\"<%=id%>_label filter-label pull-left\"> \\n\\\r\n                <label for=\"<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%>\"> \\\r\n\t\t\t\t        <%=label[val]%></label><br/> \\n\\\r\n                <span id=\"lbl<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%>\" \\n\\\r\n                  class=\"label label-primary pull-left\" \\n\\\r\n                data-bind=\"text: <% \\\r\n                  if (type===\\'checkbox\\') \\\r\n                  { %>current_<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%>() ? \\'Yes\\' : \\'No\\'<% } \\\r\n                  else \\\r\n                  {%>current_<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%><% } %>\"/> \\n\\\r\n              </div> \\n\\\r\n              <% }) %>',\r\n        bindings: ' \\n\\\r\n                  <% if(type!==\\'multiple\\') \\\r\n                  { %>value: <%=key%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%><% } \\\r\n                  else { %>novalue: <%=key%>_selectedOptions<% }%>\\n',\r\n        validation: ' \\n\\\r\n                <div class=\"clear-fix\"> \\n\\\r\n                <div class=\"field-validation-error\" \\\r\n                  data-bind=\"visible: \\\r\n                    <%=id%>_invalid\"> \\n\\\r\n                    <p><%=error%></p> \\n\\\r\n                </div> \\n',\r\n        select: ' \\n\\\r\n                <select id=\"<%=id%>\" data-bind=\" \\n\\\r\n                  <%=bindings %> \\n\\\r\n                \"></select> \\n',\r\n        multiple: ' \\n\\\r\n                <select id=\"<%=id%>\" \\n\\\r\n                  multiple=\"multiple\" \\n\\\r\n                  data-placeholder=\"  --All--\" \\n\\\r\n\t\t\t\t\t        data-bind=\" \\n\\\r\n                  <%=bindings %> \\n\\\r\n                \"></select> \\n',\r\n        checkbox: ' \\n\\\r\n                <div class=\"btn-group\" data-toggle=\"buttons\"> \\n\\\r\n                  <% _.each(options, function (opt, opt_key) { %> \\n\\\r\n                    <label class=\"btn btn-primary\"> \\n\\\r\n                      <input type=\"checkbox\" \\n\\\r\n                        data-bind=\"checkbox: \\n\\\r\n                        <%=id%>_value_<%=opt_key%>\" \\n\\\r\n                      /><%=opt%></label> \\n\\\r\n                  <% }) %>\\n\\\r\n                </div> \\n',\r\n        radio: ' \\n\\\r\n                <div class=\"btn-group form-group\" \\n\\\r\n                 data-toggle=\"buttons\" \\n\\\r\n                  data-bind=\"radio: <%=id%>_value_<%=property%>\"> \\n\\\r\n                  <% _.each(options, function (opt) { %> \\n\\\r\n                  <label class=\"btn btn-primary\">\\n\\\r\n                    <input type=\"radio\" name=\"<%=property%>\" \\n\\\r\n                     value=\"<%=opt%>\"><%=opt%></label> \\n\\\r\n                  <% }) %>\\n\\\r\n                </div> \\n',\r\n        daterange: ' \\n\\\r\n                <div class=\"pull-left\"> \\n\\\r\n                  <label class=\"daterange-label\">Begin:</label><br /> \\n\\\r\n                  <input type=\"date\" data-bind=\"datePicker: \\\r\n                    <%=id%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%>_dateRangeBegin\" /> \\n\\\r\n                </div> \\n\\\r\n                <div class=\"pull-left\"> \\n\\\r\n                  <label class=\"daterange-label\">End:</label><br /> \\n\\\r\n                  <input type=\"date\" data-bind=\"datePicker: \\\r\n                    <%=id%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%>_dateRangeEnd\" /> \\n\\\r\n                </div> \\n',\r\n        listbuilder: '\\n\\\r\n                <div class=\"filter_parameters pull-left\"> \\n\\\r\n        \t\t\t    <% _.each(parameters, function (parm, name) { %> \\n\\\r\n        \t\t\t    <div class=\"filter_parameter pull-left\"> \\n\\\r\n        \t\t\t\t    <label for=\"<%=filter.id%>_<%=name%>\"><%=parm.label%>:</label><br /> \\n\\\r\n        \t\t\t\t    <select class=\"<%=filter.id%>_<%=name%>\" \\n\\\r\n        \t\t\t\t      data-bind=\"event:{ change: <%=filter.id%>_<%=name%>_changed }, \\n\\\r\n        \t\t\t\t        value: <%=filter.id%>_<%=name%>_value, \\n\\\r\n        \t\t\t\t        options: <%=filter.id%>_<%=name%>_options, \\n\\\r\n        \t\t\t\t        optionsValue: \\'id\\', \\n\\\r\n        \t\t\t\t\t      optionsText: \\'text\\'\"></select> \\n\\\r\n        \t\t\t    </div> \\n\\\r\n                  <% }) %>\\n\\\r\n        \t\t\t    <div class=\"pull-left\"> \\n\\\r\n        \t\t\t\t    <input class=\"filter_list_button <%=id%>_addItem_button btn btn-primary\" \\n\\\r\n        \t\t\t\t      type=\"button\" value=\"Add\" \\n\\\r\n        \t\t\t\t      data-bind=\"enable: <%=id%>_enable_add_button, \\\r\n        \t\t\t\t        click: <%=id%>_addItem\" /> \\n\\\r\n        \t\t\t    </div> \\n\\\r\n        \t\t    </div> \\n\\\r\n        \t\t    <div class=\"clear-fix\" data-bind=\"visible: <%=id%>_display_filter_list\"> \\n\\\r\n      \t\t\t    <div class=\"filter_list\"> \\n\\\r\n\t\t              <div class=\"filter_list_items\"> \\n\\\r\n\t\t\t            <!-- ko foreach: <%=id%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%> --> \\n\\\r\n\t\t\t              <div class=\"filter_list_item\" \\n\\\r\n\t\t\t                data-bind=\"text: $root.<%=id%>_formatItem($data), \\n\\\r\n\t\t\t                click: $root.<%=id%>_removeItem\"></div> \\n\\\r\n\t\t\t            <!-- /ko --> \\n\\\r\n      \t\t        </div> \\n\\\r\n      \t\t      </div> \\n',\r\n        apply: ' \\n\\\r\n            <div class=\"clearfix\"></div> \\n\\\r\n            <button class=\"btn btn-primary\" \\n\\\r\n              data-bind=\"click: applyFilters\">Apply Filters</button> \\n\\\r\n            <button class=\"btn btn-primary\" \\n\\\r\n              data-bind=\"click: resetFilters\">Reset Filters</button>'\r\n      }\r\n      \r\n    };\r\n    \r\n    if (trickle.init(options))\r\n      return trickle.emit();\r\n    else\r\n      return null;\r\n  };\r\n  w.Trickle = Trickle;\r\n})(document, window, jQuery, _);","undoManager":{"mark":0,"position":4,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":2}},"text":"/*"},{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":1,"column":0}},"text":"\r\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":774,"column":0}},"lines":["Trickle - create global filters using knockout, bootstrap and chosen","authored by Ron Roth(ronrothjr@gmail.com)","","var filter = new Trickle({","  id: 'FiltersDiv',","  current: window.currentFilter,","  title: 'Trickle Filters',           //optional","  url: '/Filters/UpdateFilters',      //optional","  all: 'All',                         //optional","  hidden: true,                       //optional","  persistTrigger: 'FiltersPersisted', //optional","  model: {                            //optional","    displayFilters: window.includeFilters,","  },","  filters: {","    'order': {","      display: 'displayFilters',","      property: 'OrderNumber',","      label: 'Order Number',","      type: 'select',","      selectOptions: {","        isOptionsDictionary: true,","        allowAll: true,","        sortOptions: true,","        bindings: {","          options: window.availableItems,","          chosen: { width: '300px' },","          optionsValue: 'id',","          optionsText: 'text',","          selectedOptions: window.selectedItems","        }","      }","    }","  }","}); ","*/","","(function(d, w, $, _) {","  var Trickle = function(options) {","    var trickle = {","      id: null,","      current: null,","      title: null,","      model: {},","      changed: {},","      persistTrigger: 'FiltersPersisted',","      all: '--All--',","      hidden: true,","      initialized: false,","      ","      init: function(options) {","        if (!this.validateOptions(options))","          return false;","        _.assign(this, options);","        _.bindAll(this);","        return true;","      },","      ","      emit: function() {","        this.write();","        this.bind();","        this.original = JSON.stringify(this.current);","        return {","          get: this.getProp,","          set: this.setProp,","          reset: this.resetFilters,","          apply: this.applyFilters,","          model: this.model","        };","      },","      ","      validateOptions: function(options) {","        if (!options) {","          console.log('Trickle: no filter options');","          return false;","        }","        if (!options.id) {","          console.log('Trickle: no element id');","          return false;","        }","        if (!options.filters) {","          console.log('Trickle: no filters');","          return false;","        }","        return true;","      },","      ","      write: function () {","        (this.$view = $('#'+this.id)).append(this.html('view'));","        this.$button = this.$view.find('.filter_button');","        this.$labels = this.$view.find('.filter_labels');","        this.$content = this.$view.find('.filter_content');","        _.each(this.filters, _.bind(this.normalizeFilter, this));","        _.each(this.filters, _.bind(this.writeFilter, this));","        this.$content.append(this.html('apply'));","        this.$view.show();","      },","      ","      writeFilter: function (filter, key, filters) {","        filter.value = _.isFunction(filter.value) ? filter.value() : filter.value;","        _.each(filter.property, _.bind(function(property){","          this.model['current_'+key+'_'+property.replace(/\\./g,'_')] = ko.observable();","        }, this));","        this.model[filter.id+'_display'] = ko.observable(filter.display);","        this.model[filter.id+'_display_label'] = ko.observable(filter.display);","        if (this.hidden)","          this.$labels.append(($(this.html('labelcontainer', filter)))","            .append(($(this.html('label', filter)))));","        var bindings = this.addBindings(filter, key, filters);","        this.$content.append(($(this.html('filtercontainer', filter)))","          .append(($(this.html('filter', filter)))","            .append(this.html(filter.type,","              _.assign(filter,{","                filter: filter,","                bindings: bindings","              }))+this.html('validation',filter))));","      },","      ","      normalizeFilter: function (filter, key) {","        filter.id = key;","        filter.error = filter.error || 'Invalid '+(","          _.isUndefined(filter.label) ? filter.id :","            _.isArray(filter.label) ? filter.label.join(', ') : filter.label);","        filter.display = _.isUndefined(filter.display) ? ","          true :","          _.isBoolean(this.model[filter.display]) ?","            this.model[filter.display] :","            true;","        if (filter.property) {","          if (_.isString(filter.property))","            filter.property = [filter.property];","          if (_.isString(filter.label)) {","            var obj = {};","            obj[filter.property[0]] = filter.label;","            filter.label = obj;","          }","          filter.value = this.getDescendantProp(filter.property, this.current);","        }","        filter.value = _.isFunction(filter.value) ? filter.value() : filter.value;","      },","      ","      addBindings: function (filter, key, filters) {","        this.filter = filter;","        this.databind = '';","        if (filter.type === 'daterange')","          this.addDateRange(key,filter.property); ","        else if (filter.type === 'listbuilder') {","          this.addListBuilder(filter);","        }","        else","          _.each(filter.property, _.bind(function (property){","            this.model[key+'_value_'+property.replace(/\\./g,'_')] = ","              ko.observable();","            this.model[key+'_invalid'] = ","              ko.observable(false);","          }, this));","        if (filter.type === 'checkbox') {","          _.each(filter.property, _.bind(function (property){","            this.model[key+'_value_'+property.replace(/\\./g,'_')]","              .subscribe(_.bind(function (val) {","                var valid = false;","                _.each(filter.property, _.bind(function (property){","                  if (this.model[key+'_value_'+property.replace(/\\./g,'_')]())","                    valid = true;","                }, this));","                this.model[key+'_invalid'](!valid);","              }, this));","          }, this));","        }","        if (filter.selectOptions) {","          this.databind += this.html('bindings',{","            key: key, ","            property: filter.property, ","            type: filter.type,","            selectedOptions: ","              filter.selectOptions.bindings.selectedOptions","          });","          _.each(filter.selectOptions.bindings, this.addBinding);","        }","        if (filter.cascade){","          this.addCascadeFunction({","            filter: filter, ","            child: filters[filter.cascade.child]","          });","          this.databind += ', event: { change: '+filter.id+'_cascade }';","        }","        return this.databind;","      },","      ","      addBinding: function (binding, key) {","        var id = this.filter.id + '_' + key;","        if (_.isString(binding)){","          this.model[id] = ko.observable(binding);","          this.databind += ','+key+': \\''+binding+'\\'';","        } else {","          if (_.isFunction(binding))","            binding = binding();","          if (_.isArray(binding))","            this.model[id] = ko.observableArray(binding);","          else","            this.model[id] = ko.observable(binding);","          this.databind += ',' + key + ': ' + id;","        }","      },","      ","      getDescendantProp: function (prop, obj) {","        prop = _.isArray(prop) ? prop : [prop];","        var values = {};","        _.each(prop, _.bind(function (p) {","          var val = this.getDescendant(p, obj);","          values[p.replace(/\\./g,'_')] = ","            _.isFunction(val) ? val() : val;","        }, this));","        return values;","      },","      ","      getDescendant: function (prop, obj) {","        var a = _.isArray(prop) ? prop : prop.split(\".\");","        if (a.length === 1)","          return obj[a[0]];","        else if (a.length > 1)","          return this.getDescendant(a, obj[a.shift()]);","      },","      ","      setDescendantProp: function (obj, prop, val) {","        var a = _.isArray(prop) ? prop : prop.split(\".\");","        if (a.length === 1)","          obj[a[0]] = val;","        else if (a.length > 1)","          this.setDescendantProp(obj[a.shift()], a, val);","      },","      ","      getProp: function (prop) {","        if (prop)","          return this.getDescendantProp(prop, this.current)[prop];","        else","          return _.cloneDeep(this.current);","      },","      ","      setProp: function (prop, val) {","        if (_.isObject(prop) && _.isUndefined(val))","          this.current = prop;","        else","          this.setDescendantProp(this.current, prop, val);","        this.initialized = false;","        this.applyCurrent();","      },","      ","      bind: function () {","        this.model.all = ko.observable(this.all);","        (this.model.slide = this.slide)();","        this.model.applyFilters = this.applyFilters;","        this.model.resetFilters = this.resetFilters;","        console.log('Trickle',this.model);","        ko.applyBindings(this.model,this.$view[0]);","        this.applyCurrent();","      },","      ","      slide: function () {","        if (this.hidden && this.$button && this.$content) {","          this.$content.slideToggle('fast');","          _.delay(this.setContentOverflow, 500);","        }","      },","      ","      setContentOverflow: function () {","        this.$content.css('overflow', 'visible');","      },","      ","      resetFilters: function() {","        this.initialized = false;","        this.current = JSON.parse(this.original);","        this.applyCurrent();","      },","      ","      applyFilters: function () {","        this.changed = {};","        this.PersistLocalOnly = false;","        _.each(this.filters, this.applyFilter);","        this.persistFilters();","        if (this.$content.is(':visible'))","          this.model.slide();","      },","      ","      applyFilter: function (filter, key){","        this.filter = filter;","        this.key = key;","        _.each(this.filters[key].property, ","          this.applyFilterValue);","        ","      },","      ","      getFilterValue: function(key, property) {","        var filter = this.filters[key];","        var val,","            id = key+'_'+","              (filter.type === 'multiple' ? ","                'selectedOptions' : ","                'value_'+property.replace(/\\./g,'_')),","            original = this.getDescendantProp(property, this.current)","              [property.replace(/\\./g,'_')];","        if (filter.type==='daterange')","          val = this.getDateRangeValues(id, key);","        else {","          var invalid = this.model[key+'_invalid'];","          if (_.isUndefined(invalid) || !invalid())","            val = this.model[id]();","          else","            val = original;","        }","        return { value: val, original: original };","      },","      ","      applyFilterValue: function (property){","        var val = this.getFilterValue(this.key, property);","        if (_.isObject(val.value) ? ","        !_.isEqual(val.value,val.original) : ","        val.value != val.original)","          this.changed[this.filter.id] = true;","        this.setDescendantProp(this.current, property, val.value);","      },","      ","      persistFilters: function () {","        if (this.url)","          $.ajax({","            url: this.url,","            type: 'PUT',","            dataType: 'json',","            data: JSON.stringify(this.current),","            contentType: 'application/json; charset=utf-8',","            success: this.persistFiltersSuccess","          });","        else","          this.persistFiltersSuccess({ ","              message: 'success', ","              data: this.current","            });","      },","      ","      persistFiltersSuccess: function (response) {","        this.applyCurrent();","        _.each(this.filters, _.bind(function(filter){","          if (this.changed[filter.id]) {","            if (filter.onChanged)","              $.event.trigger(filter.onChanged, this.current);","            if (Object.keys(this.changed).length === 1 && filter.onsetCascadeConfig) {","              $.event.trigger(filter.onPersistLocalOnly, this.current);","              this.PersistLocalOnly = true;","            }","          }","        }, this));","        if (!this.PersistLocalOnly && this.persistTrigger)","          $.event.trigger(this.persistTrigger, ","            { ","              message: response.message, ","              data: response.data","            }","          );","      },","      ","      applyCurrent: function () {","        _.each(this.filters, this.applyCurrentFilter);","        this.initialized = true;","      },","      ","      applyCurrentFilter: function (filter, key){","        this.val = null;","        this.filter = filter;","        this.key = key;","        _.each(filter.property,this.applyCurrentValue);","        if (this.hidden)","          this.model[this.key+'_display_label']","            (this.val !== this.all);","      },","      ","      applyCurrentValue: function (property) {","        this.val = this.getDescendantProp(property, this.current)","          [property.replace(/\\./g,'_')];","        var id = this.key+'_value_'+property.replace(/\\./g,'_');","        if (!this.initialized) {","          if (this.filter.type === 'daterange') {","            this.model[id + '_dateRangeBegin'](this.val.Begin);","            this.model[id + '_dateRangeEnd'](this.val.End);","          }","          else ","            this.model[id](this.val);","          if (this.filter.type === 'multiple')","            this.model[this.key+'_selectedOptions'](this.val);","        }","        if (this.filter.type === 'daterange') {","          this.val = this.getDateRangeValues(id, this.key);","          this.val = !this.val.Begin || !this.val.End ? ","            this.all : ","            new Date(this.val.Begin).format('m/d/yy') + ' - ' +","            new Date(this.val.End).format('m/d/yy');","        }","        if (this.filter.type === 'select')","          if (this.model[this.key+'_optionsValue'])","            this.val = this.getOptionText(this.key, this.val);","        if (this.filter.type === 'multiple') {","          this.val = this.model[this.key+'_selectedOptions']();","          this.val = this.val.length===0 ? ","            this.all : this.val.length + ' selected';","        }","        if (this.filter.type === 'listbuilder') {","          this.val = this.model[id]();","          this.val = this.val.length===0 ? ","            this.all : this.val.length + ' selected';","        }","        this.model","          ['current_'+this.key+'_'+property.replace(/\\./g,'_')]","            (this.val);","      },","      ","      getOptionText: function (key, val) {","        var Value = this.model[key+'_optionsValue'](),","            Text = this.model[key+'_optionsText'](),","            item = this.model[key+'_options']()","                    .filter(_.bind(function(item){","                      return item[Value] == String(val);","                    }, this));","        return item ? item[0][Text] : '';","      },","      ","      addCascadeFunction: function (options) {","        var config = this.setCascadeConfig(options);","        this.model[config._parent.id+'_cascade'] = _.bind(function (e) {","          _.delay(_.bind(function (){","            this.val = this.model[config.koParent]();","            this.cascadeValue = config.bindings.optionsValue;","            this.cascadeText = config.bindings.optionsText;","            this.opts = ko.observableArray();","            _.each(config.options[this.val] || config.options, ","              this.addCascadeOption, this);","            if (config._child.selectOptions.sortOptions)","              this.opts.sort(this.sortCascadeOptions);","            if (config._child.selectOptions.allowAll) {","              var opt = {};","              opt[this.cascadeValue] = config.all || this.all;","              opt[this.cascadeText] = config.all || this.all;","              this.opts.unshift(opt);","            }","            this.model[config.koChild](this.opts()[0][this.cascadeValue]);","            this.model[config._child.id+'_options'](this.opts());","          }, this), 1);","        }, this);","      },","      ","      setCascadeConfig: function(config) {","        return config.filter ?","          {","            _parent: config.filter,","            koParent: config.filter.id+'_value_'+config.filter.property,","            _child: config.child,","            koChild: config.child.id+'_value_'+config.child.property,","            bindings: config.child.selectOptions.bindings,","            options: config.filter.cascade.options,","            all: config.all || this.all","          } : ","          {","            _parent: {id: config.key+'_'+config.name},","            koParent: config.key+'_'+config.name+'_value',","            _child: {","              id: config.key+'_'+config.parm.cascade.child,","              selectOptions: {sortOptions: true, allowAll: true}","            },","            koChild: config.key+'_'+config.parm.cascade.child+'_value',","            bindings: {optionsValue: 'id', optionsText: 'text'},","            options: config.parm.cascade.options,","            all: config.all || this.all","          };","      },","      ","      addCascadeOption: function(option, key) {","        this.opt = {};","        this.key = key;","        if (this.val === this.all){","          _.each(option, this.setCascadeOptionAll);","        }else{","          if (_.isObject(option)) {","            this.opt[this.cascadeValue] = Object.keys(option)[0];","            this.opt[this.cascadeText] = option[Object.keys(option)[0]];","          } else {","            this.opt[this.cascadeValue] = key;","            this.opt[this.cascadeText] = option;","          }","        }","        this.opts.push(this.opt);","      },","      ","      setCascadeOptionAll: function(option2, key2){","        this.opt[this.cascadeValue] = key2;","        this.opt[this.cascadeText] = option2 + ' - ' + this.key;","      },","      ","      sortCascadeOptions: function (i1, i2) {","        var prop = this.cascadeText;","        return i1[prop] < i2[prop] ? -1 : i1[prop] == i2[prop] ? 0 : 1;","      },","      ","      addDateRange: function (key, property) {","        var id = key+'_value_'+property[0].replace(/\\./g,'_');","        this.model[id+'_dateRangeBegin'] = ko.observable();","        this.model[id+'_dateRangeEnd'] = ko.observable();","        this.addDateRangeValidation(key, property);","        this.addDateRangeSubscriptions(key, property);","      },","      ","      addDateRangeValidation: function (key, property) {","        var id = key+'_value_'+property[0].replace(/\\./g,'_');","        this.model[key+'_invalid'] = ko.observable(false);","        this.model[id+'_dateRangeValidation'] = ","          _.bind(function (startDate, endDate) {","            var koInvalidDates = this.model[key+'_invalid'],","                //Strip out the time portion if it exists.","                local_startDate = startDate === '' || startDate === null ?","                  null : ","                  /T/.test(startDate) ? ","                    startDate.substring(0, startDate.indexOf('T')) : ","                    startDate,","                local_endDate = endDate === '' || endDate === null ? ","                  null : ","                  /T/.test(endDate) ? ","                    endDate.substring(0, endDate.indexOf('T')) : ","                    endDate;","            if (local_startDate && local_endDate) {","              if (local_startDate > local_endDate)","                koInvalidDates(true);","              else","                koInvalidDates(false);","            } else","              koInvalidDates(local_startDate || local_endDate);","          }, this);","      },","      ","      addDateRangeSubscriptions: function (key, property) {","        var id = key+'_value_'+property[0].replace(/\\./g,'_');","        this.model[id + '_dateRangeBegin']","          .subscribe(_.bind(function (val) {","            if (this.model[id + '_dateBegin_stopTimeout'])","              clearTimeout(this.model[id + '_dateBegin_stopTimeout']);","            this.model[id + '_dateBegin_stopTimeout'] =","              setTimeout(_.bind(function () {","                this.model[id+'_dateRangeValidation']","                  (val, this.model[id + '_dateRangeEnd']());","              },this), 100);","          }, this));","        this.model[id + '_dateRangeEnd']","          .subscribe(_.bind(function (val) {","            if (this.model[id + '_dateEnd_stopTimeout'])","              clearTimeout(this.model[id + '_dateEnd_stopTimeout']);","            this.model[id + '_dateEnd_stopTimeout'] = ","              setTimeout(_.bind(function() {","                this.model[id+'_dateRangeValidation']","                  (this.model[id + '_dateRangeBegin'](), val);","              }, this), 100);","          }, this));","      },","      ","      getDateRangeValues: function (id, key) {","        var begin = this.model[id+'_dateRangeBegin'](),","            end = this.model[id+'_dateRangeEnd'](),","            invalid = this.model[key+'_invalid']();","        val = invalid || !begin || !end ? ","          { Begin: null, End: null } : ","          {","            Begin: new Date(begin).format('m/d/yy'),","            End: new Date(end).format('m/d/yy')","          };","        return val;","      },","      ","      addListBuilder: function (filter) {","        var self = this,","            key = filter.id,","            id = key+'_value_'+filter.property[0].replace(/\\./g,'_'),","            parameters = filter.parameters,","            all = 'Any',","            val = this.getDescendantProp(filter.property, this.current);","        self.model[id] = koList = ko.observableArray(val[filter.property]);","        self.model[key+'_invalid'] = ko.observable(false);","        self.model[key+'_enable_add_button'] = koEnabled = ko.observable(false);","        self.model[key+'_display_filter_list'] = koDisplay = ko.observable(false);","        var getItem = function (){","                var item = {};","                _.each(parameters, function (parm, name) {","                  var val = $('.'+key+'_'+name+' option:selected').text();","                  item[name] = val === all ? '' : val;","                });","                return item;","              },","            getFormat = function (data){","                var item = '';","                _.each(parameters, function (parm, name) {","                  var val = data[name] === all ? '' : data[name];","                  item += ( item !== '' && val !== '' ? ', ' : '' ) + val;","                });","                return item;","              },","            enable = function () {","                var item = getItem();","                var format = getFormat(item);","                var enabled = format !== '' &&","                    _.filter(koList(), item).length === 0;","                koEnabled(enabled);","                koDisplay(koList().length > 0);","              },","            addItem = function (){","                koList.push(getItem());","              },","            removeItem = function (data){","                koList.remove(data);","              };","        this.model[id].subscribe(enable);","        self.model[key+'_addItem'] = addItem;","        self.model[key+'_removeItem'] = removeItem;","        self.model[key+'_formatItem'] = getFormat;","        _.each(filter.parameters, function(parm, name) {","            self.model[key+'_'+name+'_value'] = ko.observable(all);","            (self.model[key+'_'+name+'_options'] = ","              ko.observableArray(parm.options))","                .unshift({id: all, text: all});","            if (parm.cascade)","              self.addCascadeFunction({","                key: key, name: name, parm: parm, all: all","              });","            self.model[key+'_'+name+'_changed'] = function(){","              if (parm.cascade)","                self.model[key+'_'+name+'_cascade']();","              enable();","            };","          });","      },","      ","      html: function (template, data) {","        return _.template(this.templates[template], data || this);","      },","      ","      templates: {","        view: ' \\n\\","          <%=title ? \"<h2>\" + title + \"</h2>\" : \"\"%>\\","          <% if (hidden) {%><button \\n\\","            class=\"filter_button btn btn-success pull-left\"\\","            data-bind=\"click: slide\">Filters</button>\\","          <div class=\"filter_labels\"></div> \\n<% } %>\\","          <div class=\"filter_content\"></div> \\n',","        labelcontainer: ' \\n\\","            <!-- ko if: <%=id%>_display_label() -->\\","            <div class=\"<%=id%>_label_container label-container pull-left\"></div> \\n\\","            <!-- /ko -->',","        filtercontainer: ' \\n\\","            <!-- ko if: <%=id%>_display() -->\\","            <div class=\"<%=id%>_container filter-container pull-left\"></div> \\n\\","            <!-- /ko -->',","        filter: '  \\n\\","              <div class=\"<%=id%>_filter filter pull-left\"> \\n\\","                <% if (!/radio|checkbox/.test(type) && label && label[property]) { %>\\","                <label for=\"ddl<%=id%>\" class=\"content-label\"> \\n\\","                <%=label[property]%></label><br/> \\n\\","              <% } %></div> \\n',","        label: '  \\n\\","              <% _.each( property, function(val) { %>\\","              <div class=\"<%=id%>_label filter-label pull-left\"> \\n\\","                <label for=\"<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%>\"> \\","\t\t\t\t        <%=label[val]%></label><br/> \\n\\","                <span id=\"lbl<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%>\" \\n\\","                  class=\"label label-primary pull-left\" \\n\\","                data-bind=\"text: <% \\","                  if (type===\\'checkbox\\') \\","                  { %>current_<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%>() ? \\'Yes\\' : \\'No\\'<% } \\","                  else \\","                  {%>current_<%=id%>_<%=val.replace(/\\\\./g,\\'_\\')%><% } %>\"/> \\n\\","              </div> \\n\\","              <% }) %>',","        bindings: ' \\n\\","                  <% if(type!==\\'multiple\\') \\","                  { %>value: <%=key%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%><% } \\","                  else { %>novalue: <%=key%>_selectedOptions<% }%>\\n',","        validation: ' \\n\\","                <div class=\"clear-fix\"> \\n\\","                <div class=\"field-validation-error\" \\","                  data-bind=\"visible: \\","                    <%=id%>_invalid\"> \\n\\","                    <p><%=error%></p> \\n\\","                </div> \\n',","        select: ' \\n\\","                <select id=\"<%=id%>\" data-bind=\" \\n\\","                  <%=bindings %> \\n\\","                \"></select> \\n',","        multiple: ' \\n\\","                <select id=\"<%=id%>\" \\n\\","                  multiple=\"multiple\" \\n\\","                  data-placeholder=\"  --All--\" \\n\\","\t\t\t\t\t        data-bind=\" \\n\\","                  <%=bindings %> \\n\\","                \"></select> \\n',","        checkbox: ' \\n\\","                <div class=\"btn-group\" data-toggle=\"buttons\"> \\n\\","                  <% _.each(options, function (opt, opt_key) { %> \\n\\","                    <label class=\"btn btn-primary\"> \\n\\","                      <input type=\"checkbox\" \\n\\","                        data-bind=\"checkbox: \\n\\","                        <%=id%>_value_<%=opt_key%>\" \\n\\","                      /><%=opt%></label> \\n\\","                  <% }) %>\\n\\","                </div> \\n',","        radio: ' \\n\\","                <div class=\"btn-group form-group\" \\n\\","                 data-toggle=\"buttons\" \\n\\","                  data-bind=\"radio: <%=id%>_value_<%=property%>\"> \\n\\","                  <% _.each(options, function (opt) { %> \\n\\","                  <label class=\"btn btn-primary\">\\n\\","                    <input type=\"radio\" name=\"<%=property%>\" \\n\\","                     value=\"<%=opt%>\"><%=opt%></label> \\n\\","                  <% }) %>\\n\\","                </div> \\n',","        daterange: ' \\n\\","                <div class=\"pull-left\"> \\n\\","                  <label class=\"daterange-label\">Begin:</label><br /> \\n\\","                  <input type=\"date\" data-bind=\"datePicker: \\","                    <%=id%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%>_dateRangeBegin\" /> \\n\\","                </div> \\n\\","                <div class=\"pull-left\"> \\n\\","                  <label class=\"daterange-label\">End:</label><br /> \\n\\","                  <input type=\"date\" data-bind=\"datePicker: \\","                    <%=id%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%>_dateRangeEnd\" /> \\n\\","                </div> \\n',","        listbuilder: '\\n\\","                <div class=\"filter_parameters pull-left\"> \\n\\","        \t\t\t    <% _.each(parameters, function (parm, name) { %> \\n\\","        \t\t\t    <div class=\"filter_parameter pull-left\"> \\n\\","        \t\t\t\t    <label for=\"<%=filter.id%>_<%=name%>\"><%=parm.label%>:</label><br /> \\n\\","        \t\t\t\t    <select class=\"<%=filter.id%>_<%=name%>\" \\n\\","        \t\t\t\t      data-bind=\"event:{ change: <%=filter.id%>_<%=name%>_changed }, \\n\\","        \t\t\t\t        value: <%=filter.id%>_<%=name%>_value, \\n\\","        \t\t\t\t        options: <%=filter.id%>_<%=name%>_options, \\n\\","        \t\t\t\t        optionsValue: \\'id\\', \\n\\","        \t\t\t\t\t      optionsText: \\'text\\'\"></select> \\n\\","        \t\t\t    </div> \\n\\","                  <% }) %>\\n\\","        \t\t\t    <div class=\"pull-left\"> \\n\\","        \t\t\t\t    <input class=\"filter_list_button <%=id%>_addItem_button btn btn-primary\" \\n\\","        \t\t\t\t      type=\"button\" value=\"Add\" \\n\\","        \t\t\t\t      data-bind=\"enable: <%=id%>_enable_add_button, \\","        \t\t\t\t        click: <%=id%>_addItem\" /> \\n\\","        \t\t\t    </div> \\n\\","        \t\t    </div> \\n\\","        \t\t    <div class=\"clear-fix\" data-bind=\"visible: <%=id%>_display_filter_list\"> \\n\\","      \t\t\t    <div class=\"filter_list\"> \\n\\","\t\t              <div class=\"filter_list_items\"> \\n\\","\t\t\t            <!-- ko foreach: <%=id%>_value_<%=property[0].replace(/\\\\./g,\\'_\\')%> --> \\n\\","\t\t\t              <div class=\"filter_list_item\" \\n\\","\t\t\t                data-bind=\"text: $root.<%=id%>_formatItem($data), \\n\\","\t\t\t                click: $root.<%=id%>_removeItem\"></div> \\n\\","\t\t\t            <!-- /ko --> \\n\\","      \t\t        </div> \\n\\","      \t\t      </div> \\n',","        apply: ' \\n\\","            <div class=\"clearfix\"></div> \\n\\","            <button class=\"btn btn-primary\" \\n\\","              data-bind=\"click: applyFilters\">Apply Filters</button> \\n\\","            <button class=\"btn btn-primary\" \\n\\","              data-bind=\"click: resetFilters\">Reset Filters</button>'","      }","      ","    };","    ","    if (trickle.init(options))","      return trickle.emit();","    else","      return null;","  };","  w.Trickle = Trickle;"]},{"action":"insertText","range":{"start":{"row":774,"column":0},"end":{"row":774,"column":32}},"text":"})(document, window, jQuery, _);"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":564,"column":8},"end":{"row":564,"column":9}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":564,"column":9},"end":{"row":564,"column":10}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":564,"column":10},"end":{"row":564,"column":11}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":564,"column":11},"end":{"row":564,"column":12}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":73,"column":23},"end":{"row":73,"column":24}},"text":"f"}]}]]},"ace":{"folds":[],"scrolltop":1102,"scrollleft":0,"selection":{"start":{"row":83,"column":23},"end":{"row":83,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":57,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1416028230449}